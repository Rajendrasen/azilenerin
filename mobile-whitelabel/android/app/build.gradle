apply plugin: "com.android.application"
buildscript {

        repositories {
        maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal 
    }
    dependencies {
       // classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.6, 0.99.99]'
    }
}
import com.android.build.OutputFile

apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.erinmobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        vectorDrawables.useSupportLibrary = true
        versionCode 162
        versionName "2.3.4"
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    flavorDimensions "whitelabel"
    productFlavors {
        erinMobile {
            dimension "whitelabel"  
            applicationId "com.erinmobile"
            resValue "string", "white_label_app_name", "ERIN"
            versionCode 177
            versionName "2.5.5"
        }
        sunriseReferrals {
            dimension "whitelabel"
            applicationId "com.sunrisereferrals"
            resValue "string", "white_label_app_name", "Amplify Sunrise Referrals"
            versionCode 108
            versionName "1.0.8"
        }
        heartlandReferrals {
            dimension "whitelabel"
            applicationId "com.heartlandreferrals"
            resValue "string", "white_label_app_name", "Heartland Dental Referrals"
            versionCode 106
            versionName "1.0.6"
        }
        sevitaReferrals {
            dimension "whitelabel"
            applicationId "com.sevitareferrals"
            resValue "string", "white_label_app_name", "Sevita Employee Referrals"
            versionCode 104
            versionName "1.0.4"
        }
        trinityReferrals {
            dimension "whitelabel"
            applicationId "com.trinityreferrals"
            resValue "string", "white_label_app_name", "Trinity Health Referrals"
            versionCode 102
            versionName "1.0.2"
        }
        pinterestReferrals {
            dimension "whitelabel"
            applicationId "com.pinterestreferrals"
            resValue "string", "white_label_app_name", "Talent Hub"
            versionCode 105
            versionName "1.0.5"
        }
        primaryaimReferrals {
            dimension "whitelabel"
            applicationId "com.primaryaimreferrals"
            resValue "string", "white_label_app_name", "Primary Aim Referrals"
            versionCode 105
            versionName "1.0.5"
        }
        partnersInEmployment {
            dimension "whitelabel"
            applicationId "com.ausreferrals"
            resValue "string", "white_label_app_name", "Partners In Employment"
            versionCode 19
            versionName "3.1.3"
        }
        refercxReferrals {
            dimension "whitelabel"
            applicationId "com.refercxreferrals"
            resValue "string", "white_label_app_name", "ReferCX"
            versionCode 105
            versionName "1.0.5"
        }
        refervetsreferrals {
            dimension "whitelabel"
            applicationId "com.refervets"
            resValue "string", "white_label_app_name", "ReferVets"
            versionCode 108
            versionName "1.0.7"
        }
        seaworldreferrals {
            dimension "whitelabel"
            applicationId "com.seaworldreferrals"
            resValue "string", "white_label_app_name", "seaworld"
            versionCode 118
            versionName "2.0.1"
        }
        apploireferrals {
            dimension "whitelabel"
            applicationId "com.apploireferrals"
            resValue "string", "white_label_app_name", "Apploi"
            versionCode 102
            versionName "1.0.2"
        }
        twilioreferrals {
            dimension "whitelabel"
            applicationId "com.twilioreferrals"
            resValue "string", "white_label_app_name", "Twilio"
            versionCode 102
            versionName "1.0.2"
        }
        goDaddyreferrals {
            dimension "whitelabel"
            applicationId "com.godaddyreferrals"
            resValue "string", "white_label_app_name", "BLOOM"
            versionCode 102
            versionName "1.0.2"
        }
        viLivingReferrals {
            dimension "whitelabel"
            applicationId "com.viliving.app"
            resValue "string", "white_label_app_name", "Vi Talent Scout"
            versionCode 102
            versionName "1.0.2"
        }
        IqviaReferrals {
            dimension "whitelabel"
            applicationId "com.iqvia.app"
            resValue "string", "white_label_app_name", "IQVIA Referrals"
            versionCode 102
            versionName "1.0.2"
        }
        northWestReferrals {
            dimension "whitelabel"
            applicationId "com.northwest.app"
            resValue "string", "white_label_app_name", "referNWC"
            versionCode 102 //till 27th-april-2023 --->101 
            versionName "1.0.2"//till 27th-april-2023 --->1.0.1
        }
        gannettFlemingReferrals {
            dimension "whitelabel"
            applicationId "com.gannettFleming.app"
            resValue "string", "white_label_app_name", "Gannett Fleming Emp. Referrals"
            versionCode 2 //till 27th-april-2023 --->1
            versionName "1.0.1"//till 27th-april-2023 --->1.0.0
        }
        mscReferrals {
            dimension "whitelabel"
            applicationId "com.mscreferrals.app"
            resValue "string", "white_label_app_name", "MSC Careers"
            versionCode 3
            versionName "1.0.2"
        }
        heartlandAffiliationReferrals {
            dimension "whitelabel"
            applicationId "com.heartlandaffiliation.app"
            resValue "string", "white_label_app_name", "Heartland Affiliation Referral"
            versionCode 101
            versionName "1.0.1"
        }
        talentReefReferrals {
            dimension "whitelabel"
            applicationId "com.talentreefreferrals.app"
            resValue "string", "white_label_app_name", "TalentReef Referrals"
            versionCode 2
            versionName "1.0.0"
        }
    }

    packagingOptions {
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
   // implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation "androidx.work:work-runtime-ktx:2.7.0"
    implementation 'com.facebook.react:react-native:0.62.2!!'
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply plugin: 'com.google.gms.google-services'